# =============================================================================
# ERP Access Control API - 開発用 Dockerfile
# =============================================================================
# Go開発環境 + 開発ツール + ホットリロード対応

FROM golang:1.24-alpine AS development

# メタデータ
LABEL maintainer="ERP Access Control API Team"
LABEL description="Development environment for ERP Access Control API"
LABEL version="1.0.0"

# 必要なパッケージのインストール
RUN apk add --no-cache \
    git \
    curl \
    bash \
    make \
    ca-certificates \
    postgresql-client \
    redis \
    gcc \
    musl-dev \
    binutils \
    && update-ca-certificates

# 作業ディレクトリ設定
WORKDIR /app

# Go modulesの設定（キャッシュ効率化）
ENV GO111MODULE=on
ENV GOPROXY=https://proxy.golang.org,direct
ENV GOSUMDB=sum.golang.org

# go.mod と go.sum をコピー（依存関係キャッシュ用）
COPY go.mod go.sum ./

# 依存関係ダウンロード
RUN go mod download && go mod verify

# 開発ツールのインストール（一時的にスキップ）
# RUN go install github.com/air-verse/air@latest && \
#     go install github.com/swaggo/swag/cmd/swag@latest && \
#     go install github.com/golangci/golangci-lint/cmd/golangci-lint@latest && \
#     go install -tags 'postgres' github.com/golang-migrate/migrate/v4/cmd/migrate@latest

# アプリケーションコードをコピー
COPY . .

# ログディレクトリ作成
RUN mkdir -p logs

# ポート公開
EXPOSE 8080 9090

# 環境変数設定
ENV GIN_MODE=debug
ENV CGO_ENABLED=1

# ヘルスチェック
HEALTHCHECK --interval=30s --timeout=10s --start-period=5s --retries=3 \
    CMD curl -f http://localhost:8080/health || exit 1

# 開発サーバー起動（Air使用でホットリロード）
CMD ["go", "run", "cmd/server/main.go"] 